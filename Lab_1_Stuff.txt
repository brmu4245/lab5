 /* Search Tree */

  // Defined in Lab1Like.scala:
  //
  // sealed abstract class SearchTree
  // case object Empty extends SearchTree
  // case class Node(l: SearchTree, d: Int, r: SearchTree) extends SearchTree

  def repOk(t: SearchTree): Boolean = {
    def check(t: SearchTree, min: Int, max: Int): Boolean = t match {
      case Empty => true
      case Node(l, d, r) => {
        if ((min <= d) && (max > d)) {
          check(l, min, d) && check(r, d, max)
        }
        else {
          false
        }
      }
    }
    check(t, Int.MinValue, Int.MaxValue)
  }
